// by yaw 2019/03/145

#ifndef WINDMILL_HPP
#define WINDMILL_HPP


#include "base.hpp"
#include "imageshow.hpp"
#include "Target.hpp"
#include "Tool.hpp"
#include "opencv2/opencv.hpp"
#include <algorithm>
#include"../rmdl/rmdl.hpp"

#define WIDTH 215
#define HEIGHT 125
#define RADIUS 740 // Wait to change to 740
#define ANGULAR_VELOCITY 60 / 180.0 * M_PI
#define EPS 1e-2
#define THRESHOLD_VALUE 100

#include <stdlib.h>

#define PATH "../../data/0/"
#define FILE_TYPE ".bmp"

namespace wm {
    static int gNameCount = 0;

    class Windmill {
    public:
        bool run(const cv::Mat &frame, float &pitch, float &yaw,
                 double time);

        static Windmill *GetInstance(const cv::Mat &cam, const cv::Mat &dist,
                                     const cv::Mat &TvCtoL, const double delay, const cv::String &modelName,
                                     armor::ImageShowClient *is) {
            static Windmill instance(cam, dist, TvCtoL, delay, modelName, is);
            return &instance;
        }

        Target findedTarget;
        Target hitTarget;
        cv::Point3f center;
        double timeStamp = 0.0;
        double delay;
        cv::Mat camMatrix;
        cv::Mat distCoeffs;
        cv::Mat TvCtoL;
        float radius = RADIUS;
        float v = ANGULAR_VELOCITY;
        float gPitch = 0.0;
        float gYaw = 0.0;


    private:
        explicit Windmill(const cv::Mat &cam, const cv::Mat &dist, const cv::Mat &TvCtoL,
                          const double delay, const cv::String& modelName, armor::ImageShowClient *is)
                : delay(delay), camMatrix(cam), distCoeffs(dist), TvCtoL(TvCtoL),
                  dafu_fucker(modelName), is(is) {}

        int Numer(cv::Mat src);

        double vote(const cv::Mat &sample);

        bool determineTarget(std::vector<cv::RotatedRect> targetRects,
                             const cv::Mat &frame);

        bool detect(const cv::Mat &frame);

        bool findCenter(); // 如果中心点坐标稳定，返回true
        void predictTarget();

        void hit(float &pitch, float &yaw);

        void draw();

        armor::ImageShowClient *is;

        rmdl::classifier60x50 dafu_fucker;

    };

    bool Windmill::findCenter() // 如果中心点坐标稳定，返回true
    {
        coodiTrans(cv::Point3f(WIDTH / 2, radius, 0), center,
                   findedTarget.RvTtoL.inv(), -findedTarget.TvTtoL);

        return true;
    };

    bool Windmill::detect(const cv::Mat &frame) {
        assert(!frame.empty());
        cv::Mat midImage;
        cv::cvtColor(frame, midImage, cv::COLOR_BGR2GRAY);
        cv::threshold(midImage, midImage, THRESHOLD_VALUE, 255, cv::THRESH_BINARY);
        is->addImg("mid",midImage);
        cv::Mat image_coutour_all = midImage.clone();
        cv::Mat image_contour_outside = midImage.clone();
        std::vector<std::vector<cv::Point>> contours_out;
        std::vector<cv::Vec4i> hierarchy_out;
        cv::findContours(image_contour_outside, contours_out, hierarchy_out,
                         cv::RETR_EXTERNAL, cv::CHAIN_APPROX_NONE);
        std::vector<std::vector<cv::Point>> contours_all;
        std::vector<cv::Vec4i> hierarchy_all;
        cv::findContours(image_coutour_all, contours_all, hierarchy_all,
                         cv::RETR_LIST, cv::CHAIN_APPROX_NONE);

        for (int i = 0; i < contours_out.size(); i++) {
            int conloursize = contours_out[i].size();
            for (int j = 0; j < contours_all.size(); j++) {
                int tem_size = contours_all[j].size();
                if (conloursize == tem_size) {
                    std::swap(contours_all[j], contours_all[contours_all.size() - 1]);
                    contours_all.pop_back();
                    break;
                }
            }
        }
        
        STATE(INFO,"before fliter",contours_all.size())
        std::vector<cv::RotatedRect> targetRects;
        for (int i = 0; i < contours_all.size(); i++) {
            cv::RotatedRect box = cv::minAreaRect(contours_all[i]);
            if (box.size.height > box.size.width * 0.2 &&
                box.size.height < box.size.width * 5) {
                if (box.size.height * box.size.width > 100.0 &&
                    box.size.width * box.size.height < 10000.0) {
                    cv::Point2f vertex[4];
                    box.points(vertex);
                    targetRects.push_back(box);
                }
            }
        }
        STATE(INFO, "finded target", targetRects.size())
        return determineTarget(targetRects, frame);
    };

    void Windmill::predictTarget() {
        float theta = delay * v; //弧度
        hitTarget = findedTarget;
        hitTarget.tPt =
                cv::Point3f(sin(theta) * radius + WIDTH / 2,
                            -(radius - cos(theta) * radius - HEIGHT / 2), 0.0);
        // hitTarget.tPt = cv::Point3f(0, 0, 0.0);
        hitTarget.pixelPts2f.clear();
        cv::Point2f outputPt;
        cv::Point2f detectedPt;
        coodiTrans(hitTarget.tPt, outputPt, hitTarget.RvTtoL, hitTarget.TvTtoL,
                   camMatrix, distCoeffs);
        coodiTrans(cv::Point3f(WIDTH / 2, HEIGHT / 2, 0.0), detectedPt,
                   hitTarget.RvTtoL, hitTarget.TvTtoL, camMatrix, distCoeffs);
        // DEBUG(camMatrix)
        // DEBUG(distCoeffs)
        // DEBUG(hitTarget.RvTtoL)
        // DEBUG(hitTarget.TvTtoL)
        // DEBUG(hitTarget.tPt)
        DEBUG(outputPt)
        hitTarget.pixelPts2f.emplace_back(cv::Point2f(outputPt.x - 5, outputPt.y + 5));
        hitTarget.pixelPts2f.emplace_back(cv::Point2f(outputPt.x - 5, outputPt.y - 5));
        hitTarget.pixelPts2f.emplace_back(cv::Point2f(outputPt.x + 5, outputPt.y - 5));
        hitTarget.pixelPts2f.emplace_back(cv::Point2f(outputPt.x + 5, outputPt.y + 5));

        std::vector<cv::Point2f> detectedPts;
        detectedPts.emplace_back(cv::Point2f(detectedPt.x - 5, detectedPt.y + 5));
        detectedPts.emplace_back(cv::Point2f(detectedPt.x - 5, detectedPt.y - 5));
        detectedPts.emplace_back(cv::Point2f(detectedPt.x + 5, detectedPt.y - 5));
        detectedPts.emplace_back(cv::Point2f(detectedPt.x + 5, detectedPt.y + 5));

        is->addEvent("detected target", detectedPts);
        return;
    };

    void Windmill::hit(float &pitch, float &yaw) {
        coodiTrans(hitTarget.tPt, hitTarget.lPt, hitTarget.RvTtoL, hitTarget.TvTtoL);
        cv::Mat eye = cv::Mat::eye(3, 3, CV_64FC1);
        coodiTrans(hitTarget.lPt, hitTarget.lPt, eye, TvCtoL);
        calPitchYaw(hitTarget.lPt, pitch, yaw);
    };

    bool Windmill::determineTarget(std::vector<cv::RotatedRect> targetRects,
                                   const cv::Mat &frame
    ) {
        DEBUG("start determinTarget")
        if (targetRects.empty()) {
            STATE(INFO, "targetRects.empty()", 1)
            return false;
        }
        auto target = targetRects.begin();
        int maxProbability = 0;
        cv::RotatedRect rect1;
        cv::RotatedRect rect2;
        cv::Mat result1;
        cv::Mat result2;
        cv::Mat borderImg;
        int top = 0.25 * frame.rows;
        int left = 0.25 * frame.cols;
        cv::copyMakeBorder(frame, borderImg, top, top, left, left,
                           cv::BORDER_CONSTANT, cv::Scalar(0, 0, 0));

        std::vector<cv::Point2f> dstPts;
        dstPts.emplace_back(cv::Point2f(0, 3 * HEIGHT));
        dstPts.emplace_back(cv::Point2f(0, 0));
        dstPts.emplace_back(cv::Point2f(WIDTH+2*HEIGHT, 0));
        dstPts.emplace_back(cv::Point2f(WIDTH+2*HEIGHT, 3 * HEIGHT));

        std::vector<cv::Point2f> tinyDstPts;
        tinyDstPts.emplace_back(cv::Point2f(0, HEIGHT));
        tinyDstPts.emplace_back(cv::Point2f(0, 0));
        tinyDstPts.emplace_back(cv::Point2f(WIDTH, 0));
        tinyDstPts.emplace_back(cv::Point2f(WIDTH, HEIGHT));

        is->addEvent("before classify", targetRects);
        DEBUG("start defasdfsaf")
        for (auto it = targetRects.begin(); it != targetRects.end(); it++) {
            auto box = *it;

            cv::Mat sample;
            if (it->size.width > it->size.height) {
                std::vector<cv::Point2f> temPts;

                cv::Point2f temPtArray[4];
                it->points(temPtArray);
                float sinH = it->size.height * sin(-it->angle / 180 * M_PI);
                float cosH = it->size.height * cos(-it->angle / 180 * M_PI);

                temPtArray[0] = cv::Point2f(temPtArray[0].x + sinH - cosH + left, temPtArray[0].y + cosH + sinH + top);
                temPtArray[1] = cv::Point2f(temPtArray[1].x - sinH - cosH + left, temPtArray[1].y - cosH + sinH + top);
                temPtArray[2] = cv::Point2f(temPtArray[2].x - sinH + cosH + left, temPtArray[2].y - cosH - sinH + top);
                temPtArray[3] = cv::Point2f(temPtArray[3].x + sinH + cosH + left, temPtArray[3].y + cosH - sinH + top);

                temPts.push_back(temPtArray[0]);
                temPts.push_back(temPtArray[1]);
                temPts.push_back(temPtArray[2]);
                temPts.push_back(temPtArray[3]);

                cv::Mat transMat = cv::getPerspectiveTransform(temPts, dstPts);
                cv::warpPerspective(borderImg, sample, transMat, cv::Size(WIDTH + 2 * HEIGHT, 3 * HEIGHT));
            }

            else {
                std::vector<cv::Point2f> temPts;

                cv::Point2f temPtArray[4];
                it->points(temPtArray);
                float sinH = it->size.width * sin(-it->angle / 180 * M_PI);
                float cosH = it->size.width * cos(-it->angle / 180 * M_PI);

                temPtArray[0] = cv::Point2f(temPtArray[0].x + sinH - cosH + left, temPtArray[0].y + cosH + sinH + top);
                temPtArray[1] = cv::Point2f(temPtArray[1].x - sinH - cosH + left, temPtArray[1].y - cosH + sinH + top);
                temPtArray[2] = cv::Point2f(temPtArray[2].x - sinH + cosH + left, temPtArray[2].y - cosH - sinH + top);
                temPtArray[3] = cv::Point2f(temPtArray[3].x + sinH + cosH + left, temPtArray[3].y + cosH - sinH + top);

                temPts.push_back(temPtArray[1]);
                temPts.push_back(temPtArray[2]);
                temPts.push_back(temPtArray[3]);
                temPts.push_back(temPtArray[0]);

                cv::Mat transMat = cv::getPerspectiveTransform(temPts, dstPts);
                cv::warpPerspective(borderImg, sample, transMat, cv::Size(WIDTH + 2 * HEIGHT, 3 * HEIGHT));
            }
            // cv::imshow("sample", sample);
            is->addImg("sample",sample);
            time_t nowtime;
            nowtime = time(nullptr);
            // cv::imwrite(PATH + cv::format("%d", nowtime) + FILE_TYPE, sample);
            gNameCount++;
            double voteResult = vote(sample);
            if (voteResult > maxProbability) {
                maxProbability = voteResult;
                target = it;
            }
        }

        DEBUG("end loop")
        // 判断内边外边
        cv::Point2f centerPt1, centerPt2;
        if (target->size.height > target->size.width) {
            centerPt1 = cv::Point2f(
                    target->center.x +
                    target->size.width / 2 * cos(-target->angle / 180 * M_PI),
                    target->center.y -
                    target->size.width / 2 * sin(-target->angle / 180 * M_PI));
            centerPt2 = cv::Point2f(
                    target->center.x -
                    target->size.width / 2 * cos(-target->angle / 180 * M_PI),
                    target->center.y +
                    target->size.width / 2 * sin(-target->angle / 180 * M_PI));

            rect1 = cv::RotatedRect(
                    cv::Point2f(target->center.x +
                                target->size.width * cos(-target->angle / 180 * M_PI),
                                target->center.y -
                                target->size.width * sin(-target->angle / 180 * M_PI)),
                    target->size, target->angle);
            rect2 = cv::RotatedRect(
                    cv::Point2f(target->center.x -
                                target->size.width * cos(-target->angle / 180 * M_PI),
                                target->center.y +
                                target->size.width * sin(-target->angle / 180 * M_PI)),
                    target->size, target->angle);

            std::vector<cv::Point2f> temPts1;

            cv::Point2f temPtArray1[4];
            rect1.points(temPtArray1);
            temPtArray1[0] =
                    cv::Point2f(temPtArray1[0].x + left, temPtArray1[0].y + top);
            temPtArray1[1] =
                    cv::Point2f(temPtArray1[1].x + left, temPtArray1[1].y + top);
            temPtArray1[2] =
                    cv::Point2f(temPtArray1[2].x + left, temPtArray1[2].y + top);
            temPtArray1[3] =
                    cv::Point2f(temPtArray1[3].x + left, temPtArray1[3].y + top);
            temPts1.push_back(temPtArray1[1]);
            temPts1.push_back(temPtArray1[2]);
            temPts1.push_back(temPtArray1[3]);
            temPts1.push_back(temPtArray1[0]);

            cv::Mat transMat1 = cv::getPerspectiveTransform(temPts1, tinyDstPts);
            cv::warpPerspective(borderImg, result1, transMat1, cv::Size(WIDTH, HEIGHT));

            std::vector<cv::Point2f> temPts2;

            cv::Point2f temPtArray2[4];
            rect2.points(temPtArray2);
            temPtArray2[0] =
                    cv::Point2f(temPtArray2[0].x + left, temPtArray2[0].y + top);
            temPtArray2[1] =
                    cv::Point2f(temPtArray2[1].x + left, temPtArray2[1].y + top);
            temPtArray2[2] =
                    cv::Point2f(temPtArray2[2].x + left, temPtArray2[2].y + top);
            temPtArray2[3] =
                    cv::Point2f(temPtArray2[3].x + left, temPtArray2[3].y + top);
            temPts2.push_back(temPtArray2[1]);
            temPts2.push_back(temPtArray2[2]);
            temPts2.push_back(temPtArray2[3]);
            temPts2.push_back(temPtArray2[0]);

            cv::Mat transMat2 = cv::getPerspectiveTransform(temPts2, tinyDstPts);
            cv::warpPerspective(borderImg, result2, transMat2, cv::Size(WIDTH, HEIGHT));
        } else {
            centerPt1 = cv::Point2f(
                    target->center.x -
                    target->size.height / 2 * sin(-target->angle / 180 * M_PI),
                    target->center.y -
                    target->size.height / 2 * cos(-target->angle / 180 * M_PI));
            centerPt2 = cv::Point2f(
                    target->center.x +
                    target->size.height / 2 * sin(-target->angle / 180 * M_PI),
                    target->center.y +
                    target->size.height / 2 * cos(-target->angle / 180 * M_PI));

            rect1 = cv::RotatedRect(
                    cv::Point2f(target->center.x -
                                target->size.height * sin(-target->angle / 180 * M_PI),
                                target->center.y -
                                target->size.height * cos(-target->angle / 180 * M_PI)),
                    target->size, target->angle);
            rect2 = cv::RotatedRect(
                    cv::Point2f(target->center.x +
                                target->size.height * sin(-target->angle / 180 * M_PI),
                                target->center.y +
                                target->size.height * cos(-target->angle / 180 * M_PI)),
                    target->size, target->angle);
            std::vector<cv::Point2f> temPts1;

            cv::Point2f temPtArray1[4];
            rect1.points(temPtArray1);

            temPtArray1[0] =
                    cv::Point2f(temPtArray1[0].x + left, temPtArray1[0].y + top);
            temPtArray1[1] =
                    cv::Point2f(temPtArray1[1].x + left, temPtArray1[1].y + top);
            temPtArray1[2] =
                    cv::Point2f(temPtArray1[2].x + left, temPtArray1[2].y + top);
            temPtArray1[3] =
                    cv::Point2f(temPtArray1[3].x + left, temPtArray1[3].y + top);

            temPts1.push_back(temPtArray1[0]);
            temPts1.push_back(temPtArray1[1]);
            temPts1.push_back(temPtArray1[2]);
            temPts1.push_back(temPtArray1[3]);

            cv::Mat transMat1 = cv::getPerspectiveTransform(temPts1, tinyDstPts);
            cv::warpPerspective(borderImg, result1, transMat1, cv::Size(WIDTH, HEIGHT));

            std::vector<cv::Point2f> temPts2;

            cv::Point2f temPtArray2[4];
            rect2.points(temPtArray2);
            temPtArray2[0] =
                    cv::Point2f(temPtArray2[0].x + left, temPtArray2[0].y + top);
            temPtArray2[1] =
                    cv::Point2f(temPtArray2[1].x + left, temPtArray2[1].y + top);
            temPtArray2[2] =
                    cv::Point2f(temPtArray2[2].x + left, temPtArray2[2].y + top);
            temPtArray2[3] =
                    cv::Point2f(temPtArray2[3].x + left, temPtArray2[3].y + top);
            temPts2.push_back(temPtArray2[0]);
            temPts2.push_back(temPtArray2[1]);
            temPts2.push_back(temPtArray2[2]);
            temPts2.push_back(temPtArray2[3]);

            cv::Mat transMat2 = cv::getPerspectiveTransform(temPts2, tinyDstPts);
            cv::warpPerspective(borderImg, result2, transMat2, cv::Size(WIDTH, HEIGHT));
        }

        // cv::imshow("result1", result1);
        // cv::imshow("result2", result2);

        //灰度化二值化，再用迭代器统计白色像素数量，多的那个即为矩形的内边，返回值就是内边的中点坐标
        cv::cvtColor(result1, result1, cv::COLOR_BGR2GRAY);
        cv::cvtColor(result2, result2, cv::COLOR_BGR2GRAY);
        cv::threshold(result1, result1, THRESHOLD_VALUE, 255, cv::THRESH_BINARY);
        cv::threshold(result2, result2, THRESHOLD_VALUE, 255, cv::THRESH_BINARY);

        // Numer函数见下面
        int n1 = Numer(result1);
        int n2 = Numer(result2);

        cv::Point2f insidePt;
        cv::Point2f outsidePt;
        if (n1 > n2) {
            insidePt = centerPt1;
            outsidePt = centerPt2;

            is->addEvent("inside", rect1);
            is->addEvent("outside", rect2);

        } else if (n2 > n1) {
            insidePt = centerPt2;
            outsidePt = centerPt1;

            is->addEvent("inside", rect2);
            is->addEvent("outside", rect1);

        } else {
            STATE(INFO, "can't judge outside inside", 1)
            return false;
        }

        cv::Point2f resultPts[4];
        target->points(resultPts);
        //判断四个点的顺序
        cv::Point2f sortedPts[4];
        auto referVec = outsidePt - insidePt;
        bool conditions[4] = {false, false, false, false};
        for (int i = 0; i < 4; ++i) {
            auto ptVec = resultPts[i] - insidePt;
            if ((ptVec.x * referVec.y - ptVec.y * referVec.x) < 0) {
                if (cv::abs(ptVec.x * referVec.x + ptVec.y * referVec.y) < EPS) {
                    if (conditions[0]) {
                        STATE(INFO, "can't judge left right", 1)
                        return false;
                    } else
                        conditions[0] = true;
                    sortedPts[1] = resultPts[i];
                } else {
                    if (conditions[1]) {
                        STATE(INFO, "can't judge left right", 1)
                        return false;
                    } else
                        conditions[1] = true;
                    sortedPts[0] = resultPts[i];
                }
            } else {
                if (cv::abs(ptVec.x * referVec.x + ptVec.y * referVec.y) < EPS) {
                    if (conditions[2]) {
                        STATE(INFO, "can't judge left right", 1)
                        return false;
                    } else
                        conditions[2] = true;
                    sortedPts[2] = resultPts[i];
                } else {
                    if (conditions[3]) {
                        STATE(INFO, "can't judge left right", 1)
                        return false;
                    } else
                        conditions[3] = true;
                    sortedPts[3] = resultPts[i];
                }
            }
        }

        for (int i = 0; i < 4; ++i) {
            findedTarget.pixelPts2f.push_back(sortedPts[i]);
        }
        is->addText(cv::format("size.x:%0.2f", cv::norm(findedTarget.pixelPts2f[0]-findedTarget.pixelPts2f[1])));
        is->addText(cv::format("size.y:%0.2f",  cv::norm(findedTarget.pixelPts2f[0]-findedTarget.pixelPts2f[2])));
        // DEBUG(sortedPts[0]);
        // DEBUG(sortedPts[1]);
        // DEBUG(sortedPts[2]);
        // DEBUG(sortedPts[3]);
        // cv::waitKey();
        return true;
    }

//红色像素计数器
    int Windmill::Numer(cv::Mat src) {
        int counter = 0;
        //迭代器访问像素点
        auto it = src.begin<uchar>();
        auto itend = src.end<uchar>();
        while (it != itend) {
            if ((*it) > 0)
                counter += 1;
            ++it;
        }
        return counter;
    }

    void Windmill::draw() {
        is->addText(cv::format("aim.x:%0.2f", hitTarget.lPt.x));
        is->addText(cv::format("aim.y:%0.2f", hitTarget.lPt.y));
        is->addText(cv::format("aim.z:%0.2f", hitTarget.lPt.z));

        is->addText(cv::format("center.x:%0.2f", center.x));
        is->addText(cv::format("center.y:%0.2f", center.y));
        is->addText(cv::format("center.z:%0.2f", center.z));

        is->addText(cv::format("v :%0.2f", v));

        is->addText(cv::format("delay :%0.2f", delay));
        static std::vector<std::vector<cv::Point2f>> historyTargets;
        historyTargets.push_back(hitTarget.pixelPts2f);
        if (!historyTargets.empty())
            is->addEvent("hit history", historyTargets);
        is->addEvent("hit target", hitTarget.pixelPts2f);
        std::vector<cv::Point2f> centers;
        centers.emplace_back(cv::Point2f(960 - 10, 540 - 10));
        centers.emplace_back(cv::Point2f(960 - 10, 540 + 10));
        centers.emplace_back(cv::Point2f(960 + 10, 540 + 10));
        centers.emplace_back(cv::Point2f(960 + 10, 540 - 10));
        is->addEvent("centers", centers);
    }

    double Windmill::vote(const cv::Mat &sample
    ) {
        cv::Mat temp;
        cv::cvtColor(sample, temp, cv::COLOR_BGR2GRAY);
        const static cv::Size2i fixed_size(50, 60);
        cv::resize(temp, temp, fixed_size);
        double result = dafu_fucker.forward_score(temp);
        return result;
    }

    bool Windmill::run(const cv::Mat &frame, float &pitch, float &yaw,
                       double time) {

        findedTarget.clear();
        hitTarget.clear();
        timeStamp = time;
        if (detect(frame)) {

            calRvTv(findedTarget.pixelPts2f, WIDTH, HEIGHT, camMatrix, distCoeffs,
                    findedTarget.RvTtoL, findedTarget.TvTtoL);

            if (findCenter()) {
                predictTarget();
                hit(pitch, yaw);

                Windmill::draw();

                return true;
            }
        }
        STATE(INFO, "no target", 1)
        return false;
    }

} // namespace wm
#endif
